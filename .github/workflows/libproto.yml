name: Build LibProto For (Windows,Ios,Aos,Mac)

on:
  workflow_dispatch

env:
  PB_LIBRARY_PATH: ${{ github.workspace }}
  
jobs:
  build_windows:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: 'recursive'

    - name: Apply patch to protobuf source
      run: |
        cd $env:PB_LIBRARY_PATH\protobuf-source
        git apply ..\build\patch\diff-base-on-3.19.0.diff

    - name: Create Build Directory
      run: mkdir ${{env.PB_LIBRARY_PATH}}\build\_win64
           
    - name: Configure CMake with Visual Studio
      working-directory: ${{env.PB_LIBRARY_PATH}}\build\_win64
      run: |
        cmake -G "Visual Studio 17 2022" -A x64 `
          -DCMAKE_INSTALL_PREFIX=${{env.PB_LIBRARY_PATH}}/libprotobuf `
          -DCMAKE_MSVC_RUNTIME_LIBRARY="MultiThreaded$<$<CONFIG:Debug>:Debug>DLL" `
          -Dprotobuf_BUILD_TESTS=false -Dprotobuf_WITH_ZLIB=false `
          -Dprotobuf_DEBUG_POSTFIX="" `
          -DCMAKE_INSTALL_LIBDIR="lib/win64/$<$<CONFIG:Debug>:Debug>$<$<CONFIG:Release>:Release>" `
          -DCMAKE_INSTALL_CMAKEDIR=lib/win64/cmake `
          -Dprotobuf_MSVC_STATIC_RUNTIME=false `
          -DCMAKE_POLICY_DEFAULT_CMP0091=NEW -DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreadedDLL `
          ${{env.PB_LIBRARY_PATH}}/protobuf-source/cmake 
        cmake --build . --target INSTALL --config Debug 
        cmake --build . --target INSTALL --config Release
      
    - name: Upload Binaries As Artifact
      uses: actions/upload-artifact@v3
      with:
        name: LibProtoBuf-For-Windows
        path: ${{env.PB_LIBRARY_PATH}}\libprotobuf\lib
    

  build_android:
    env:
      ANDROID_HOME: /Users/runner/Library/Android/sdk
      ANDROID_NDK: /Users/runner/Library/Android/sdk/ndk/25.2.9519653
      ANDROID_NDK_HOME: /Users/runner/Library/Android/sdk/ndk/25.2.9519653
      ANDROID_NDK_NINJA: /Users/runner/Library/Android/sdk/cmake/3.22.1/bin/ninja
      ANDROID_NDK_CMAKE: /Users/runner/Library/Android/sdk/cmake/3.22.1/bin/cmake
      
    runs-on: macOS-13

    steps: 
    - name: Install Android SDK and NDK
      run: |
          echo "Installing Android dependencies..."
          echo ${{env.PB_LIBRARY_PATH}}
          echo ${{env.ANDROID_HOME}}
          echo ${{env.ANDROID_NDK_HOME}}
          echo ${{env.ANDROID_NDK_CMAKE}}
          echo ${{env.ANDROID_NDK_NINJA}}
          ${{env.ANDROID_NDK_CMAKE}} --version
          ${{env.ANDROID_NDK_NINJA}} --version
   
    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: 'recursive'
        
    - name: Apply Patch To Protobuf Source
      working-directory: ${{env.PB_LIBRARY_PATH}}/protobuf-source
      run: |
        git apply ../build/patch/diff-base-on-3.19.0.diff

    - name: Create Android Build Directory
      run: mkdir ${{env.PB_LIBRARY_PATH}}/build/_android
           
    - name: Configure CMake with Andriod ToolChain
      working-directory: ${{env.PB_LIBRARY_PATH}}/build/_android
      run: |
        for a in armeabi-v7a arm64-v8a x86_64; do
          mkdir $a && pushd $a &&
          ${{env.ANDROID_NDK_CMAKE}} -G "Ninja Multi-Config" \
          -DCMAKE_TOOLCHAIN_FILE="${{env.ANDROID_NDK_HOME}}/build/cmake/android.toolchain.cmake" \
          -DCMAKE_MAKE_PROGRAM="${{env.ANDROID_NDK_NINJA}}" \
          -DANDROID_ABI=$a -Dprotobuf_DEBUG_POSTFIX="" \
          -DCMAKE_INSTALL_PREFIX=${{env.PB_LIBRARY_PATH}}/libprotobuf \
          -DCMAKE_INSTALL_LIBDIR="lib/android/$a/$<CONFIG>" \
          -DCMAKE_INSTALL_CMAKEDIR=lib/android/$a/cmake \
          -Dprotobuf_BUILD_TESTS=false -Dprotobuf_WITH_ZLIB=false \
          -Dprotobuf_BUILD_PROTOC_BINARIES=false -Dprotobuf_BUILD_LIBPROTOC=false \
          ${{env.PB_LIBRARY_PATH}}/protobuf-source/cmake 
          ${{env.ANDROID_NDK_CMAKE}} --build . --target install --config Debug
          ${{env.ANDROID_NDK_CMAKE}} --build . --target install --config Release
          popd
        done

    - name: Upload binaries as artifact
      uses: actions/upload-artifact@v3
      with:
        name: LibProtoBuf-For-AOS
        path: ${{env.PB_LIBRARY_PATH}}/libprotobuf/lib

  build_ios:
    runs-on: macOS-12

    steps:   
    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: 'recursive'
        
    - name: Apply Aatch To Protobuf Source
      working-directory: ${{env.PB_LIBRARY_PATH}}/protobuf-source
      run: |
        git apply ../build/patch/diff-base-on-3.19.0.diff

    - name: Create IOS Build Directory
      run: mkdir ${{env.PB_LIBRARY_PATH}}/build/_ios

    # - name: Set Xcode version
    #   run: sudo xcode-select -s /Applications/Xcode_13.4.1.app/Contents/Developer
    
    - name: Print Xcode version
      run: xcodebuild -version
           
    - name: Configure CMake With IOS Toolchain
      working-directory: ${{env.PB_LIBRARY_PATH}}/build/_ios
      run: |
        cmake -G "Unix Makefiles" \
         -DCMAKE_INSTALL_PREFIX=${{env.PB_LIBRARY_PATH}}/libprotobuf \
         -DCMAKE_TOOLCHAIN_FILE=${{env.PB_LIBRARY_PATH}}/build/ios/ios.toolchain.cmake \
         -DCMAKE_INSTALL_LIBDIR=lib/ios -DPLATFORM=OS64 \
         -DCMAKE_INSTALL_CMAKEDIR=lib/ios/cmake -DCMAKE_CXX_STANDARD=17 \
         -DCMAKE_OSX_ARCHITECTURES=arm64 \
         -Dprotobuf_BUILD_TESTS=false -Dprotobuf_WITH_ZLIB=false \
         -Dprotobuf_BUILD_EXAMPLES=false \
         -Dprotobuf_BUILD_PROTOC_BINARIES=false -Dprotobuf_BUILD_LIBPROTOC=false \
         ${{env.PB_LIBRARY_PATH}}/protobuf-source/cmake
        cmake --build . --target install --config Release

    - name: Upload binaries as artifact
      uses: actions/upload-artifact@v3
      with:
        name: LibProtoBuf-For-IOS
        path: ${{env.PB_LIBRARY_PATH}}/libprotobuf/lib

  build_mac:
    runs-on: macOS-12

    steps:   
    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: 'recursive'
        
    - name: Apply Aatch To Protobuf Source
      working-directory: ${{env.PB_LIBRARY_PATH}}/protobuf-source
      run: |
        git apply ../build/patch/diff-base-on-3.19.0.diff

    - name: Create Mac Build Directory
      run: mkdir ${{env.PB_LIBRARY_PATH}}/build/_mac

    # - name: Set Xcode version
    #   run: sudo xcode-select -s /Applications/Xcode_13.4.1.app/Contents/Developer
    
    - name: Print Xcode version
      run: xcodebuild -version
           
    - name: Configure CMake With Mac Toolchain
      working-directory: ${{env.PB_LIBRARY_PATH}}/build/_mac
      run: |
        cmake -G "Unix Makefiles" \
         -DCMAKE_INSTALL_PREFIX=${{env.PB_LIBRARY_PATH}}/libprotobuf \
         -DCMAKE_INSTALL_LIBDIR=lib/mac -DCMAKE_OSX_DEPLOYMENT_TARGET=10.14 \
         -DCMAKE_INSTALL_CMAKEDIR=lib/mac/cmake -DCMAKE_CXX_STANDARD=17 \
         -DCMAKE_OSX_ARCHITECTURES=arm64 \
         -Dprotobuf_BUILD_TESTS=false -Dprotobuf_WITH_ZLIB=false \
         -Dprotobuf_BUILD_EXAMPLES=false \
         -Dprotobuf_BUILD_PROTOC_BINARIES=false -Dprotobuf_BUILD_LIBPROTOC=false \
         ${{env.PB_LIBRARY_PATH}}/protobuf-source/cmake
        cmake --build . --target install --config Release

    - name: Upload binaries as artifact
      uses: actions/upload-artifact@v3
      with:
        name: LibProtoBuf-For-Mac
        path: ${{env.PB_LIBRARY_PATH}}/libprotobuf/lib

  combine_artifacts:
      runs-on: ubuntu-latest
      needs: [build_windows, build_android, build_ios,build_mac]

      steps:
      - name: Checkout code
        uses: actions/checkout@v3
  
  
      - name: Download artifacts from Windows job
        uses: actions/download-artifact@v3
        with:
          name: LibProtoBuf-For-Windows
          path: windows-artifacts
  
      - name: Download artifacts from Android job
        uses: actions/download-artifact@v3
        with:
          name: LibProtoBuf-For-AOS
          path: android-artifacts
  
      - name: Download artifacts from iOS job
        uses: actions/download-artifact@v3
        with:
          name: LibProtoBuf-For-IOS
          path: ios-artifacts

      - name: Download artifacts from Mac job
        uses: actions/download-artifact@v3
        with:
          name: LibProtoBuf-For-Mac
          path: mac-artifacts
  
      - name: Combine artifacts
        run: |
          # Combine the artifacts from different jobs into a single directory
          mkdir combined-artifacts
          cp -r windows-artifacts/* combined-artifacts/
          cp -r android-artifacts/* combined-artifacts/
          cp -r ios-artifacts/* combined-artifacts/
          cp -r mac-artifacts/* combined-artifacts/
  
      - name: Upload combined artifacts
        uses: actions/upload-artifact@v3
        with:
          name: combined-artifacts
          path: combined-artifacts
